#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5662
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RBV_AccesoDatos
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="RBV")]
	public partial class RBVDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertempresa(empresa instance);
    partial void Updateempresa(empresa instance);
    partial void Deleteempresa(empresa instance);
    partial void InsertempresaUsuario(empresaUsuario instance);
    partial void UpdateempresaUsuario(empresaUsuario instance);
    partial void DeleteempresaUsuario(empresaUsuario instance);
    #endregion
		
		public RBVDataContext() : 
				base(global::RBV_AccesoDatos.Properties.Settings.Default.RBVConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public RBVDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RBVDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RBVDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RBVDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<empresa> empresas
		{
			get
			{
				return this.GetTable<empresa>();
			}
		}
		
		public System.Data.Linq.Table<empresaUsuario> empresaUsuarios
		{
			get
			{
				return this.GetTable<empresaUsuario>();
			}
		}
		
		[Function(Name="dbo.aspnet_Membership_GetPassword")]
		public ISingleResult<aspnet_Membership_GetPasswordResult> aspnet_Membership_GetPassword([Parameter(Name="ApplicationName", DbType="NVarChar(256)")] string applicationName, [Parameter(Name="UserName", DbType="NVarChar(256)")] string userName, [Parameter(Name="MaxInvalidPasswordAttempts", DbType="Int")] System.Nullable<int> maxInvalidPasswordAttempts, [Parameter(Name="PasswordAttemptWindow", DbType="Int")] System.Nullable<int> passwordAttemptWindow, [Parameter(Name="CurrentTimeUtc", DbType="DateTime")] System.Nullable<System.DateTime> currentTimeUtc, [Parameter(Name="PasswordAnswer", DbType="NVarChar(128)")] string passwordAnswer)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), applicationName, userName, maxInvalidPasswordAttempts, passwordAttemptWindow, currentTimeUtc, passwordAnswer);
			return ((ISingleResult<aspnet_Membership_GetPasswordResult>)(result.ReturnValue));
		}
	}
	
	[Table(Name="dbo.empresa")]
	public partial class empresa : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _idEmpresa;
		
		private string _empresa1;
		
		private EntitySet<empresaUsuario> _empresaUsuarios;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidEmpresaChanging(short value);
    partial void OnidEmpresaChanged();
    partial void Onempresa1Changing(string value);
    partial void Onempresa1Changed();
    #endregion
		
		public empresa()
		{
			this._empresaUsuarios = new EntitySet<empresaUsuario>(new Action<empresaUsuario>(this.attach_empresaUsuarios), new Action<empresaUsuario>(this.detach_empresaUsuarios));
			OnCreated();
		}
		
		[Column(Storage="_idEmpresa", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short idEmpresa
		{
			get
			{
				return this._idEmpresa;
			}
			set
			{
				if ((this._idEmpresa != value))
				{
					this.OnidEmpresaChanging(value);
					this.SendPropertyChanging();
					this._idEmpresa = value;
					this.SendPropertyChanged("idEmpresa");
					this.OnidEmpresaChanged();
				}
			}
		}
		
		[Column(Name="empresa", Storage="_empresa1", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string empresa1
		{
			get
			{
				return this._empresa1;
			}
			set
			{
				if ((this._empresa1 != value))
				{
					this.Onempresa1Changing(value);
					this.SendPropertyChanging();
					this._empresa1 = value;
					this.SendPropertyChanged("empresa1");
					this.Onempresa1Changed();
				}
			}
		}
		
		[Association(Name="empresa_empresaUsuario", Storage="_empresaUsuarios", OtherKey="idEmpresa")]
		public EntitySet<empresaUsuario> empresaUsuarios
		{
			get
			{
				return this._empresaUsuarios;
			}
			set
			{
				this._empresaUsuarios.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_empresaUsuarios(empresaUsuario entity)
		{
			this.SendPropertyChanging();
			entity.empresa = this;
		}
		
		private void detach_empresaUsuarios(empresaUsuario entity)
		{
			this.SendPropertyChanging();
			entity.empresa = null;
		}
	}
	
	[Table(Name="dbo.empresaUsuario")]
	public partial class empresaUsuario : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _idUsuarioEmpresa;
		
		private short _idEmpresa;
		
		private System.Guid _UserId;
		
		private EntityRef<empresa> _empresa;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidUsuarioEmpresaChanging(short value);
    partial void OnidUsuarioEmpresaChanged();
    partial void OnidEmpresaChanging(short value);
    partial void OnidEmpresaChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    #endregion
		
		public empresaUsuario()
		{
			this._empresa = default(EntityRef<empresa>);
			OnCreated();
		}
		
		[Column(Storage="_idUsuarioEmpresa", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short idUsuarioEmpresa
		{
			get
			{
				return this._idUsuarioEmpresa;
			}
			set
			{
				if ((this._idUsuarioEmpresa != value))
				{
					this.OnidUsuarioEmpresaChanging(value);
					this.SendPropertyChanging();
					this._idUsuarioEmpresa = value;
					this.SendPropertyChanged("idUsuarioEmpresa");
					this.OnidUsuarioEmpresaChanged();
				}
			}
		}
		
		[Column(Storage="_idEmpresa", DbType="SmallInt NOT NULL")]
		public short idEmpresa
		{
			get
			{
				return this._idEmpresa;
			}
			set
			{
				if ((this._idEmpresa != value))
				{
					if (this._empresa.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidEmpresaChanging(value);
					this.SendPropertyChanging();
					this._idEmpresa = value;
					this.SendPropertyChanged("idEmpresa");
					this.OnidEmpresaChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Association(Name="empresa_empresaUsuario", Storage="_empresa", ThisKey="idEmpresa", IsForeignKey=true)]
		public empresa empresa
		{
			get
			{
				return this._empresa.Entity;
			}
			set
			{
				empresa previousValue = this._empresa.Entity;
				if (((previousValue != value) 
							|| (this._empresa.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._empresa.Entity = null;
						previousValue.empresaUsuarios.Remove(this);
					}
					this._empresa.Entity = value;
					if ((value != null))
					{
						value.empresaUsuarios.Add(this);
						this._idEmpresa = value.idEmpresa;
					}
					else
					{
						this._idEmpresa = default(short);
					}
					this.SendPropertyChanged("empresa");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class aspnet_Membership_GetPasswordResult
	{
		
		private string _Column1;
		
		private System.Nullable<int> _Column2;
		
		public aspnet_Membership_GetPasswordResult()
		{
		}
		
		[Column(Storage="_Column1", DbType="NVarChar(128)")]
		public string Column1
		{
			get
			{
				return this._Column1;
			}
			set
			{
				if ((this._Column1 != value))
				{
					this._Column1 = value;
				}
			}
		}
		
		[Column(Storage="_Column2", DbType="Int")]
		public System.Nullable<int> Column2
		{
			get
			{
				return this._Column2;
			}
			set
			{
				if ((this._Column2 != value))
				{
					this._Column2 = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
